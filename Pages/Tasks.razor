@page "/tasks"
@inject HttpClient Http
@using Management_Tasks.Pages
@inject Management_Tasks.ApiServices.UserService UserService
@* @inject Management_Tasks.ApiServices.TaskService TaskService *@

<PageTitle>Tache</PageTitle>
<div class="d-flex justify-content-center align-items-center vh-170">
    <div class="card p-4 shadow-lg rounded-lg" style="width: 800px;">
        <h3 class="text-center"><b>FORMULAIRE DE CRÉATION DES TACHES</b></h3>
        <EditForm Model="@taskModel" OnValidSubmit="@HandleValidSubmit">
            <div class="form-group">
                <label for="id_task">ID</label>
                <InputText id="id_task" class="form-control" @bind-Value="taskModel.Matricule" readonly />
            </div>

            <div class="form-group">
                <label for="title">Titre</label>
                <InputText id="title" class="form-control" @bind-Value="taskModel.Titre" />
            </div>

            <div class="form-group">
                <label for="libellé">Description de la tache</label>
                <InputTextArea id="libellé" class="form-control" @bind-Value="taskModel.TaskDetails" />
            </div>

            <div class="form-group">
                <label for="user">Assigné à</label>
                <InputText id="user" class="form-control" list="user_list" @bind-Value="taskModel.UserTask" />
                <datalist id="user_list">
                    @foreach (var user in utilisateurs)
                    {
                        <option value="@user.Nom"></option>
                    }
                </datalist>
            </div>

            <div class="form-group">
                <label for="dateDebut">Date début</label>
                <InputDate id="dateDebut" class="form-control" @bind-Value="taskModel.TaskStartDate" />
            </div>

            <div class="form-group">
                <label for="dateFin">Date fin</label>
                <InputDate id="dateFin" class="form-control" @bind-Value="taskModel.TaskDueDate" />
            </div>

            <div class="form-group text-center">
                <button type="submit" class="btn btn-primary">Envoyer</button>
                <button type="button" class="btn btn-secondary" @onclick="HandleReset">Annuler</button>
            </div>
            <div id="message" class="text-danger">@message</div>
        </EditForm>
    </div>
</div>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Titre</th>
            <th>Description</th>
            <th>Utilisateur</th>
            <th>Date de debut</th>
            <th>Date de fin</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var tache in taches)
            {
                <tr>
                    <td>@tache.Titre</td>
                    <td>@tache.TaskDetails</td>
                    <td>@tache.UserTask</td>
                    <td>@tache.TaskStartDate</td>
                    <td>@tache.TaskDueDate</td>
                </tr>
            }
        </tbody>
</table>
@code {
    @using Microsoft.Extensions.Logging

    private DataModel.TaskModel taskModel = new DataModel.TaskModel();
    private List<DataModel.UserModel> utilisateurs = new List<DataModel.UserModel>();
    private List<DataModel.TaskModel> taches = new List<DataModel.TaskModel>();
    private string message = string.Empty;
    protected override async void OnInitialized()
    {
        utilisateurs = await UserService.GetUsersAsync(); 
    }


      private void HandleValidSubmit()
    {
        // utilisateurs = await UserService.GetUsersAsync(); 
        // Logique pour gérer l'envoi du formulaire
        message = "Formulaire envoyé avec succès!";
      //  Logger.LogInformation($"ID: {taskModel.Matricule}, Titre: {taskModel.Titre}, Description: {taskModel.TaskDetails}, Assigné à: {taskModel.UserTask}, Date début: {taskModel.TaskStartDate}, Date fin: {taskModel.TaskDueDate}");
    }
    

    private void HandleReset()
    {
        // Logique pour gérer la réinitialisation du formulaire
        taskModel = new DataModel.TaskModel();
        message = string.Empty;
    }
}


