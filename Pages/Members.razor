@page "/users"
@inject HttpClient Http
@inject Management_Tasks.ApiServices.UserService UserService
@inject ILogger<ApiServices.UserService> logger
@*C'est ainsi qu'on récupère une classe dans la page de vue  *@ 
@* @using Management_Tasks.Pages *@

<PageTitle>Membres</PageTitle>
<form @onsubmit="OnSearch">
    <input type="text" placeholder="Rechercher par nom..." @bind="nom" required />
    <input type="text" placeholder="Saisissez le rôle" @bind="role" required />
    <button type="submit">Rechercher</button>
</form>

<div class="d-flex justify-content-center align-items-center vh-170">
    <div class="card p-4 shadow-lg rounded-lg" style="width: 800px;">
        <h3 class="text-center"><b>FORMULAIRE DE CRÉATION DES UTILISATEURS</b></h3>
        <EditForm Model="@userModel" OnValidSubmit="@HandleValidSubmit">
            <div class="form-group">
                <label for="lastname">Nom</label>
                <InputText id="lastname" class="form-control" @bind-Value="userModel.Nom" />
            </div>

            <div class="form-group">
                <label for="password">Mot de passe</label>
                <InputText id="password" type="password" placeholder="Password" class="form-control"
                    @bind-Value="userModel.Pass" />
            </div>

            <div class="form-group">
                <label for="role">Rôle</label>
                <InputSelect id="role" class="form-control" @bind-Value="roleString">
                    <option value="Administrateur">Administrateur</option>
                    <option value="Utilisateur">Utilisateur</option>
                </InputSelect>
            </div>

            <div class="form-group">
                <label for="checkpass">Confirmer mot de passe</label>
                <InputText id="check_pass" type="password" placeholder="Confirmed password" class="form-control"
                    @bind-Value="passWord" />
            </div>

            <div class="form-group">
                <label for="email">Adresse Mail</label>
                <InputText id="email" type="email" class="form-control" @bind-Value="userModel.Email" />
            </div>

            <button type="submit" class="btn btn-primary btn-block">Soumettre</button>
            <button type="button" class="btn btn-secondary" @onclick="HandleReset">Annuler</button>
            <div id="message" class="text-danger">@message</div>
        </EditForm>
    </div>
</div>

<!-- Tableau des utilisateurs -->
@if (utilisateurs != null && utilisateurs.Count > 0)
{
    <table class="table table-striped">
    <thead>
        <tr>
            <th>Nom</th>
            <th>Email</th>
            <th>Rôle</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in utilisateurs)
            {
                <tr>
                    <td>@user.Nom</td>
                    <td>@user.Email</td>
                    <td>@user.Role</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (searchCompleted)
{
    <p>Aucun utilisateur trouvé.</p>
}

@code {
    private DataModel.UserModel userModel = new DataModel.UserModel();
    private List<DataModel.UserModel> utilisateurs = new List<DataModel.UserModel>();
    private string roleString = string.Empty;
    private string message = string.Empty;
    private enum MessageType { Succes, Error }
    private string passWord = string.Empty;
    private string nom = string.Empty;
    private string role = string.Empty;
    private bool searchCompleted = false;

    public bool CheckPass()
    {
        if (!string.IsNullOrWhiteSpace(passWord) && passWord == userModel.Pass)
        {
            message = $"{MessageType.Succes}";
            return true;
        }
        message = $"{MessageType.Error}: Les mots de passe ne correspondent pas.";
        return false;
    }

    protected async Task HandleValidSubmit()
    {
        if (!CheckPass())
        {
            message = $"{MessageType.Error}: Les mots de passe ne correspondent pas. L'utilisateur n'a pas été créé.";
            return;
        }
        try
        {
            Enum.TryParse(roleString, true, out DataModel.UserModel.Privilege privilege);
            userModel.Role = privilege;
            DataModel.UserModel utilisateur = new DataModel.UserModel();
            utilisateur.Nom = userModel.Nom;
            utilisateur.Pass = userModel.Pass;
            utilisateur.Role = userModel.Role;
            utilisateur.Email = userModel.Email;
            await UserService.CreateUser(utilisateur);
            utilisateurs = await UserService.GetUsersAsync();
            await Task.Delay(4000);
            message = $"{MessageType.Succes}: Utilisateur créé avec succès.";
        }
        catch (Exception ex)
        {
            message = $"{MessageType.Error}: {ex.Message}";
            message = $"{MessageType.Error}:Erreur lors du chargement des utilisateurs : {ex.Message}";
        }
       
    }
    private void HandleReset()
    {
        userModel = new DataModel.UserModel();
        message = string.Empty;
    }

    public async Task OnSearch()
    {
        try
        {
            utilisateurs = await UserService.GetSingleUserByNameRole(nom, role);
            searchCompleted = true;
        }
        catch (Exception ex)
        {
            message = $"{MessageType.Error}Erreur lors de la recherche d'utilisateur : {ex.Message}";
            utilisateurs = new List<DataModel.UserModel>(); // Réinitialiser si une erreur se produit
            searchCompleted = true;
        }
    }
    private string TextColor(MessageType messageType)
    {
        return messageType switch
        {
            MessageType.Succes => "#00FF00", // Vert pour succès
            MessageType.Error => "#FF0000", // Rouge pour erreur
            _ => string.Empty
        };
    }

}
